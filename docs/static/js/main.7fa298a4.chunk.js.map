{"version":3,"sources":["components/inputTodo.jsx","components/todoArea.jsx","App.jsx","index.js"],"names":["InputTodo","props","todoText","onChange","onClick","_jsxs","SInput","children","_jsx","placeholder","value","styled","div","_templateObject","_taggedTemplateLiteral","TodoArea","todos","onChangeCount","onClickEdit","onClickDelete","onClickUpdate","updateText","className","map","todo","index","SList","type","label","checked","open","App","_useState","useState","_useState2","_slicedToArray","numAll","setNumAll","_useState3","_useState4","numIncomplete","setNumIncomplete","_useState5","_useState6","numComplete","setNumComplete","_useState7","_useState8","setTodoText","_useState9","_useState10","incompleteTodos","setIncompleteTodos","_useState11","_useState12","setUpdateText","countCompletes","newTodos","length","filter","event","target","concat","_toConsumableArray","e","newTodo","_objectSpread","alert","splice","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.7fa298a4.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const InputTodo = (props) => {\n  const { todoText, onChange, onClick } = props;\n  return (\n    <SInput>\n      <input placeholder=\"TODOを入力\" value={todoText} onChange={onChange} />\n      <button onClick={onClick}>保存</button>\n    </SInput>\n  );\n};\n\nconst SInput = styled.div`\n  width: 400px;\n  height: 30px;\n  margin: 8px;\n  padding: 8px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const TodoArea = (props) => {\n  const {\n    todos,\n    onChangeCount,\n    onClickEdit,\n    onClickDelete,\n    onClickUpdate,\n    updateText,\n    onChange\n  } = props;\n  return (\n    <div className=\"imcomplete-area\">\n      <p className=\"title\">未完了のTODO</p>\n      {todos.map((todo, index) => {\n        return (\n          <SList key={todo.label}>\n            <input\n              type=\"checkbox\"\n              onChange={onChangeCount}\n              value={todo.label}\n              checked={todo.checked}\n            />\n            {todo.open ? (\n              <li>\n                <input value={updateText} onChange={onChange} />\n                <button onClick={() => onClickUpdate(index)}>保存</button>\n              </li>\n            ) : (\n              <li>\n                {todo.label}\n                <button onClick={() => onClickEdit(index)}>編集</button>\n                <button onClick={() => onClickDelete(index)}>削除</button>\n              </li>\n            )}\n          </SList>\n        );\n      })}\n    </div>\n  );\n};\n\nconst SList = styled.div`\n  display: flex;\n  padding-bottom: 4px;\n  li {\n    list-style: none;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { InputTodo } from \"./components/inputTodo\";\nimport { TodoArea } from \"./components/todoArea\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [numAll, setNumAll] = useState(0);\n  const [numIncomplete, setNumIncomplete] = useState(0);\n  const [numComplete, setNumComplete] = useState(0);\n  const [todoText, setTodoText] = useState(\"\");\n  const [incompleteTodos, setIncompleteTodos] = useState([\n    { label: \"task1\", checked: false, open: false },\n    { label: \"task2\", checked: false, open: false },\n    { label: \"task3\", checked: false, open: false }\n  ]);\n  const [updateText, setUpdateText] = useState();\n\n  const onChangeTodoText = (event) => setTodoText(event.target.value);\n\n  const onChangeEditText = (event) => {\n    setUpdateText(event.target.value);\n  };\n\n  const countCompletes = (newTodos) => {\n    setNumAll(newTodos.length);\n    const numComplete = newTodos.filter((todo) => todo.checked).length;\n    setNumComplete(numComplete);\n    setNumIncomplete(newTodos.length - numComplete);\n  };\n\n  const onClickAdd = () => {\n    if (todoText === \"\") return;\n    const newTodos = [\n      ...incompleteTodos,\n      { label: todoText, checked: false, open: false }\n    ];\n    setIncompleteTodos(newTodos);\n    setTodoText(\"\");\n\n    countCompletes(newTodos);\n  };\n\n  const onChangeCount = (e) => {\n    const newTodos = incompleteTodos.map((todo) => {\n      const newTodo = { ...todo };\n      if (newTodo.label === e.target.value) {\n        newTodo.checked = !newTodo.checked;\n      }\n      return newTodo;\n    });\n    setIncompleteTodos(newTodos);\n    countCompletes(newTodos);\n  };\n\n  const onClickEdi = (index) => {\n    const newTodos = [...incompleteTodos];\n    newTodos[index].open = !newTodos[index].open;\n    setUpdateText(incompleteTodos[index].label);\n    setIncompleteTodos(newTodos);\n  };\n\n  const onClickUpdate = (index) => {\n    const newTodos = [...incompleteTodos];\n    newTodos[index].open = !newTodos[index].open;\n    newTodos[index].label = updateText;\n    setIncompleteTodos(newTodos);\n  };\n\n  const onClickDelete = (index) => {\n    alert(\"本当によろしいですか？\");\n    const newTodos = [...incompleteTodos];\n    newTodos.splice(index, 1);\n    setIncompleteTodos(newTodos);\n    countCompletes(newTodos);\n  };\n\n  return (\n    <div className=\"App\">\n      <InputTodo\n        todoText={todoText}\n        onChange={onChangeTodoText}\n        onClick={onClickAdd}\n      />\n      <p>全てのタスク：{numAll}</p>\n      <p>完了したタスク：{numComplete}</p>\n      <p>未完了のタスク：{numIncomplete}</p>\n      <TodoArea\n        todos={incompleteTodos}\n        onChangeCount={onChangeCount}\n        onClickEdit={onClickEdi}\n        onClickDelete={onClickDelete}\n        onClickUpdate={onClickUpdate}\n        updateText={updateText}\n        onChange={onChangeEditText}\n      />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}